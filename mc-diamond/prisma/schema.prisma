// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  phone       String
  address     String
  city        String
  state       String
  zipCode     String   @map("zip_code")
  country     String   @default("Nigeria")
  isDefault   Boolean  @default(false) @map("is_default")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model Product {
  id            String     @id @default(cuid())
  name          String
  slug          String     @unique
  description   String     @db.Text
  price         Float
  compareAtPrice Float?     @map("compare_at_price")
  sku           String?    @unique
  barcode       String?
  quantity      Int        @default(0)
  isAvailable   Boolean    @default(true) @map("is_available")
  isFeatured    Boolean    @default(false) @map("is_featured")
  images        Json       @default("[]")
  categoryId    String     @map("category_id")
  category      Category   @relation(fields: [categoryId], references: [id])
  variants      Variant[]
  reviews       Review[]
  orderItems    OrderItem[]
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  @@map("products")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  parentId    String?   @map("parent_id")
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model Variant {
  id         String   @id @default(cuid())
  name       String
  values     Json     @default("{}")
  price      Float?
  sku        String?
  barcode    String?
  quantity   Int      @default(0)
  productId  String   @map("product_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("variants")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @map("order_number")
  userId          String      @map("user_id")
  status          OrderStatus @default(PENDING)
  subtotal        Float
  shipping        Float
  tax             Float       @default(0)
  total           Float
  shippingAddress Json        @map("shipping_address")
  billingAddress  Json?       @map("billing_address")
  paymentMethod   String      @map("payment_method")
  paymentStatus   String      @default("pending") @map("payment_status")
  transactionId   String?     @map("transaction_id")
  trackingNumber  String?     @map("tracking_number")
  shippingMethod  String?     @map("shipping_method")
  notes           String?     @db.Text
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String   @map("order_id")
  productId  String   @map("product_id")
  variantId  String?  @map("variant_id")
  price      Float
  quantity   Int
  total      Float
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
  variant    Variant? @relation(fields: [variantId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  title      String
  comment    String   @db.Text
  isApproved Boolean  @default(false) @map("is_approved")
  userId     String   @map("user_id")
  productId  String   @map("product_id")
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

enum UserRole {
  USER
  ADMIN
  EDITOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
